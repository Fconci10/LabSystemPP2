<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox2.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        IIxtP2ITBMLoNhrD3iiMhpL1whsbbW5xmQ9qikalEWEVaXuuXuUPWitCE+F+6S9TAeEzrfi6xWAqIHyu
        bUQHNbZutEZDL0LRm2391LbGaGhGaP4nRfDykkON0dCMsBE6mdpa5+FXijv9bc3fcIK/9B6+3k5fWfMe
        mIi21nz4ajt9beuwK+Kg/PC1dvrWGv7Z9NPoP/xXQHi0DWt+0dfmFQ7/NRAe/907Ez9r8xqH/yoIjefp
        9HNas3mBw5+lcZHzzhrzY+fo1P4xRv/xql7yJew2Rft5+gG/yvGa10N4/MeP38T588/0/wNhzvb0+ePv
        77t0tL///XmRA1y2r3ZI87831Y9/fy4DgBc6wOrlEV7ZaeT2ugdYvewhlWYRDvUW4VBvEQ71FuFQbxEO
        9RbhUG8RDvUW4VBsp88XWC8s1SIc6i3Cod4iHOotwqHeIhzqLcKh3iIc6i3Cod4iHOotwqHeIhzqLcKh
        3iIc6i3Cod7OwtqbdotwqLcIh3qLcKi3CId6i3CotwiHeotwqLcIh3qLcKi3CId6i3CotwiHeotwqLcI
        h2I7fWLtTa1FOJTbqvo/DrlHtoqnpkYAAAAASUVORK5CYII=
</value>
  </data>
</root>